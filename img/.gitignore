
--boundary_.oOo._gxbHs1wd818x2I0t71x7dU1qgZnuxCeY
Content-Length: 186
Content-Type: application/octet-stream
X-File-MD5: de6fda7bea6153e69675316efd31a853
X-File-Mtime: 1693748493
X-File-Path: /code/web/cod-cite/img/arrow_down.svg

<svg width="10" height="7" viewBox="0 0 10 7" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 1L5 5L9 1" stroke="#00093C" stroke-width="2" stroke-linecap="round"/>
</svg>

--boundary_.oOo._gxbHs1wd818x2I0t71x7dU1qgZnuxCeY
Content-Length: 460
Content-Type: application/octet-stream
X-File-MD5: 1f61269bafea0f2c3d6a19c2486124a0
X-File-Mtime: 1693748493
X-File-Path: /code/web/cod-cite/img/authorise_logo.svg

<svg width="18" height="19" viewBox="0 0 18 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="5.17969" y="1" width="6.63833" height="8.41108" rx="3.31917" stroke="#00093C" stroke-width="2"/>
<path d="M1 15.4102C1 13.7533 2.34315 12.4102 4 12.4102H13.2795C14.9364 12.4102 16.2795 13.7533 16.2795 15.4102V16.322C16.2795 16.8742 15.8318 17.322 15.2795 17.322H2C1.44772 17.322 1 16.8742 1 16.322V15.4102Z" stroke="#00093C" stroke-width="2"/>
</svg>

--boundary_.oOo._gxbHs1wd818x2I0t71x7dU1qgZnuxCeY
Content-Length: 4898
Content-Type: application/octet-stream
X-File-MD5: 56e45f2bcbc8226d2b4200f7c46371bf
X-File-Mtime: 1693748492
X-File-Path: /code/web/cod-cite/.git/hooks/pre-rebase.sample

#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

--boundary_.oOo._gxbHs1wd818x2I0t71x7dU1qgZnuxCeY
Content-Length: 6067
Content-Type: application/octet-stream
X-File-MD5: fe9c25b7da4a8bb195f962a39137fc28
X-File-Mtime: 1693748493
X-File-Path: /code/web/cod-cite/img/book.svg

<svg width="50" height="51" viewBox="0 0 50 51" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M28.422 24.1478C28.5685 24.4408 28.8615 24.5996 29.1667 24.5996C29.2888 24.5996 29.4231 24.5751 29.5452 24.5141C29.594 24.4897 34.5019 21.9991 36.9193 21.2299C37.3588 21.0956 37.603 20.6195 37.4565 20.18C37.3222 19.7405 36.8582 19.4963 36.4065 19.6306C33.8549 20.4364 28.9836 22.9147 28.776 23.0124C28.3853 23.2444 28.2144 23.7449 28.422 24.1478Z" fill="#00093C"/>
<path d="M29.1662 14.6113C29.2883 14.6113 29.4226 14.5869 29.5447 14.5258C29.5935 14.5014 34.5014 12.0108 36.9188 11.2417C37.3583 11.1074 37.6024 10.6312 37.4559 10.1917C37.3216 9.75218 36.8577 9.50801 36.406 9.6423C33.8544 10.4481 28.9831 12.9265 28.7755 13.0241C28.3604 13.2317 28.2017 13.7322 28.4092 14.1473C28.5802 14.4403 28.8732 14.6113 29.1662 14.6113Z" fill="#00093C"/>
<path d="M49.1769 12.9404C48.713 12.9404 48.3467 13.3189 48.3467 13.7706V46.2703C48.3467 47.6499 47.2235 48.7731 45.8439 48.7731H25.8338V46.8564C27.0546 46.4291 30.2167 45.4402 33.3299 45.4402C40.5942 45.4402 45.5143 47.0517 45.5631 47.0639C45.8195 47.1494 46.0881 47.1005 46.3079 46.954C46.5276 46.7953 46.6497 46.5512 46.6497 46.2826V9.60742C46.6497 9.21674 46.3811 8.87489 46.0026 8.78943C46.0026 8.78943 45.3434 8.64293 44.2324 8.43538C43.7806 8.34992 43.3411 8.65514 43.2679 9.10686C43.1824 9.55859 43.4876 9.9981 43.9394 10.0836C44.3667 10.1568 44.7207 10.2301 45.0015 10.2911V45.1716C43.1092 44.671 38.9216 43.7798 33.3299 43.7798C29.7039 43.7798 26.1268 44.9762 25.028 45.3791C24.0513 44.9396 21.0845 43.7798 17.4952 43.7798C11.757 43.7798 7.02004 44.732 4.99338 45.2082V10.2545C6.65378 9.83939 11.5739 8.77722 17.4952